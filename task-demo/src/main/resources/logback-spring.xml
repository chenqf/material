<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当配置文件被修改后, 将会被重新载入
scanPeriod: 见识配置文件是否有修改的间隔时间, 若没给出时间代为, 默认为毫秒
debug: 当此属性设置为true时, 将打印出logback内部日志信息, 默认为false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 全局配置，获取应用名称 -->
    <springProperty scope="context" name="SPRING_APP_NAME" source="spring.application.name"/>
    <property name="APP_NAME" value="${SPRING_APP_NAME}"/>
    <!-- 日志输出格式: %d表示日期时间, %thread表示线程名, %logger:类名, %-5level:级别从左显示5个字符, %msg:日志消息, %n:换行 -->
    <property name="FILE_LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level [${SPRING_APP_NAME:-unknown}] [%thread] %logger{36} - traceId:%X{traceId} - %msg%n" />

    <!-- 输出到控制台 -->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!--  所有日志输出到文件 - Production  -->
    <appender name="fileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 基于时间和大小的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名, 必须包含%i, 从0开始 -->
            <fileNamePattern>logs/${APP_NAME:-app}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 设置最大保留的历史日志文件数量 -->
            <maxHistory>30</maxHistory>
            <!-- 每个文件最大20MB,超过最大值新建一个文件 -->
            <maxFileSize>20MB</maxFileSize>
            <!-- 所有日志加起来的最大的大小 -->
            <totalSizeCap>400MB</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
    </appender>

    <!--  Error日志单独输入到一个文件  -->
    <appender name="errorFileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>logs/error/${SPRING_APP_NAME:-app}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>50MB</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>utf-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>error</level>
        </filter>
    </appender>

    <!-- 异步输出 -->
    <appender name="asyncAppender" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 默认如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志，若要保留全部日志，设置为0 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="fileAppender"/>
        <includeCallerData>true</includeCallerData>
    </appender>

    <!--  必选节点, 指定日志的输出级别, 只有一个level属性  -->
    <!--  生产环境INFO  -->
    <root level="INFO">
        <!--  开启控制台输出  -->
        <appender-ref ref="consoleAppender"/>
        <!--  开启文件输出  -->
<!--        <appender-ref ref="asyncAppender"/>-->
<!--        &lt;!&ndash; error 日志 &ndash;&gt;-->
<!--        <appender-ref ref="errorFileAppender"/>-->
    </root>
</configuration>