<?xml version="1.0" encoding="UTF-8"?>
<!--
scan: 当配置文件被修改后, 将会被重新载入
scanPeriod: 见识配置文件是否有修改的间隔时间, 若没给出时间代为, 默认为毫秒
debug: 当此属性设置为true时, 将打印出logback内部日志信息, 默认为false
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 全局配置，获取应用名称 -->
    <property name="appName" value="${spring.application.name}" />
    <!--  输出到文件 - Production  -->
    <appender name="fileAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 基于时间和大小的滚动策略 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志文件输出的文件名, 必须包含%i, 从0开始 -->
            <fileNamePattern>logs/myapp.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <!-- 设置最大保留的历史日志文件数量 -->
            <maxHistory>30</maxHistory>
            <!-- 每个文件最大20MB,超过最大值新建一个文件 -->
            <maxFileSize>10MB</maxFileSize>
            <!-- 所有日志加起来的最大的大小 -->
            <totalSizeCap>400MB</totalSizeCap>
        </rollingPolicy>
        <!-- 日志输出到文件中的格式 -->
        <encoder>
            <!-- %d表示日期时间, %thread表示线程名, %logger:类名, %-5level:级别从左显示5个字符, %msg:日志消息, %n:换行 -->
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [${appName:-unknown}] [%thread] %logger{36} - traceId:%X{traceId} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
    </appender>

    <!--  必选节点, 指定日志的输出级别, 只有一个level属性  -->
    <!--  生产环境INFO  -->
    <root level="INFO">
        <!--  开启文件输出  -->
        <appender-ref ref="fileAppender"/>
    </root>
</configuration>